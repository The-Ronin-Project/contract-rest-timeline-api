---
openapi: 3.0.2
info:
    title: Timeline Service API
    description: |-
        The [Timeline Service](https://projectronin.atlassian.net/wiki/spaces/ENG/pages/1990393974/Timeline+Service):
            - consumes events containing reported symptoms data from [CTS](https://projectronin.atlassian.net/wiki/spaces/ENG/pages/1969750023/Clinician+Triage+Service) (Clinician Triage Service)
            - stores a subset of that information needed to track timeline-oriented symptoms data
            - serves said data pre-transformed/optimized to the frontend

        To authorize requests in local & dev environments from this document, click `Authorize`, copy/paste the below auth token, and click `Authorize` again.
        
        ```
        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NTMzMjgzMjAsImlzcyI6IlNla2kiLCJqdGkiOiIycm9zcW05M2VlbmFwYmlrZm8wMXFrODEiLCJzdWIiOiIxNTFhMjUwOS1lNjllLTQwNDMtYmJhOC1kYmY5ODhkZGE1NTUiLCJ0ZW5hbnRpZCI6ImFwcG9zbmQifQ.gmX_Ad6sgTTW0iogI4kwuhYYbnpn5HGIE5RZxi56Ojs
        ```
    contact:
        name: Team APEX (in Slack)
        url: https://projectronin.slack.com/archives/C03QLMWKE12
    version: 0.1.0
externalDocs:
    description: Find out more about Timeline Service
    url: https://projectronin.atlassian.net/wiki/spaces/ENG/pages/1990393974/Timeline+Service
servers:
    - url: /api/v1
tags:
    - name: Timeline Symptoms
      description: Generic timeline events of various types
    - name: Timeline Vitals
      description: timeline vitals events
    - name: Timeline Labs
      description: timeline labs events
    - name: Timeline Metadata
      description: Patient metadata pertaining to timeline
    - name: Mock Events (Local/Dev Only)
      description: Mock publication of events, consumed by CTS synchronously
paths:
    "/events/symptoms":
        post:
            security:
                - Seki: []
            description: Mocks event consumption of Questionnaire Response topic
            operationId: createQuestionnaireResponse
            tags:
                - Mock Events (Local/Dev Only)
            requestBody:
                description: Mocked example payload of Kafka event.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QuestionnaireResponseEventBody'
            responses:
                '201':
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/QuestionnaireResponseEventResponse"
                '401':
                    description: Unauthorized, you didn’t send your token
                '403':
                    description: Forbidden, you sent your token and I have determined you unworthy
                '404':
                    description: Patient not found, either that resource doesn’t exist or I don’t want
                        to tell you it does and you don’t have access
                '500':
                    description: Unexpected error.
    "/events/observations":
        post:
            security:
                -   Seki: [ ]
            description: Event consumption of Observations topic - both Vitals and Labs are on this topic
            operationId: createObservation
            tags:
                - Mock Events (Local/Dev Only)
            requestBody:
                description: Mocked example payload of Kafka event.
                content:
                    application/json:
                        schema:
                            type: object
            responses:
                '201':
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Vital"
                '401':
                    description: Unauthorized, you didn’t send your token
                '403':
                    description: Forbidden, you sent your token and I have determined you unworthy
                '404':
                    description: Patient not found, either that resource doesn’t exist or I don’t want
                        to tell you it does and you don’t have access
                '500':
                    description: Unexpected error.
    "/tenants/{tenantId}/patients/{patientId}/timeline/metadata":
        parameters:
            - name: patientId
              in: path
              description: ID of patient to query by
              required: true
              schema:
                  type: string
              example: 022628c4-d1ea-4ae3-9a6b-04c30ac4f903
            - name: tenantId
              in: path
              description: ID of tenant patient and clinician belongs to
              required: true
              schema:
                  type: string
                  example: apposnd
        get:
            security:
                - Seki: []
            description: Get timeline metadata pertaining to when date ranges start/end
                for a patient
            operationId: getTimelineMetadata
            tags:
                - Timeline Metadata
            summary: Get timeline metadata pertaining to specified patient
            responses:
                '200':
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TimelineMetadataResponse"
                '401':
                    description: Unauthorized, you didn’t send your token
                '403':
                    description: Forbidden, you sent your token and I have determined you unworthy
                '404':
                    description: Patient not found, either that resource doesn’t exist or I don’t want
                        to tell you it does and you don’t have access
                '500':
                    description: Unexpected error.
    "/tenants/{tenantId}/patients/{patientId}/timeline/symptoms":
        parameters:
            - name: patientId
              in: path
              description: ID of patient to query by
              required: true
              schema:
                  type: string
              example: 022628c4-d1ea-4ae3-9a6b-04c30ac4f903
            - name: tenantId
              in: path
              description: ID of tenant patient and clinician belongs to
              required: true
              schema:
                type: string
                example: apposnd
        get:
            security:
                - Seki: []
            tags:
                - Timeline Symptoms
            summary: Get symptom timeline events
            description: Get all timeline events where (a) the timeline timestamp is between
                the specified start & end timestamps, and (b) where the timeline event type
                is `symptoms`.
            operationId: getSymptomTimelineEvents
            parameters:
                - name: start
                  in: query
                  description: UTC timestamp representing the (inclusive) starting point of
                      the date range by which to query timeline events. If not provided, no lower limit will be defined.
                  required: false
                  schema:
                      type: string
                      format: date-time
                      example: '2023-01-01T00:00:01Z'
                - name: end
                  in: query
                  description: UTC timestamp representing the (exclusive) ending point of the
                      date range by which to query timeline events. If not provided, no upper limit will be defined.
                  required: false
                  schema:
                      type: string
                      format: date-time
                      example: '2024-01-01T00:00:01Z'
            responses:
                '200':
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SymptomReportResponse"
                '401':
                    description: Unauthorized, you didn’t send your token
                '403':
                    description: Forbidden, you sent your token and I have determined you unworthy
                '404':
                    description: Patient or tenant not found, either that resource doesn’t exist or I don’t want
                        to tell you it does and you don’t have access
                '500':
                    description: Unexpected error.
    "/tenants/{tenantId}/patients/{patientId}/timeline/vitals":
        parameters:
            - name: patientId
              in: path
              description: ID of patient to query by
              required: true
              schema:
                  type: string
              example: 022628c4-d1ea-4ae3-9a6b-04c30ac4f903
            - name: tenantId
              in: path
              description: ID of tenant patient and clinician belongs to
              required: true
              schema:
                  type: string
              example: apposnd
        get:
            security:
                - Seki: []
            tags:
                - Timeline Vitals
            summary: Get vitals timeline events
            description: Get all timeline events where (a) the timeline timestamp is between
                the specified start & end timestamps, and (b) where the timeline event type
                is `vitals`.
            operationId: getVitalsTimelineEvents
            parameters:
                - name: start
                  in: query
                  description: UTC timestamp representing the (inclusive) starting point of
                      the date range by which to query timeline events. If not provided, no lower limit will be defined.
                  required: false
                  schema:
                      type: string
                      format: date-time
                      example: '2023-01-01T00:00:01Z'
                - name: end
                  in: query
                  description: UTC timestamp representing the (exclusive) ending point of the
                      date range by which to query timeline events. If not provided, no upper limit will be defined.
                  required: false
                  schema:
                      type: string
                      format: date-time
                      example: '2024-01-01T00:00:01Z'
            responses:
                '200':
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    "$ref": "#/components/schemas/Vital"
                '401':
                    description: Unauthorized, you didn’t send your token
                '403':
                    description: Forbidden, you sent your token and I have determined you unworthy
                '404':
                    description: Patient or tenant not found, either that resource doesn’t exist or I don’t want
                        to tell you it does and you don’t have access
                '500':
                    description: Unexpected error.
    "/tenants/{tenantId}/patients/{patientId}/timeline/labs":
        parameters:
            - name: patientId
              in: path
              description: ID of patient to query by
              required: true
              schema:
                  type: string
              example: 022628c4-d1ea-4ae3-9a6b-04c30ac4f903
            - name: tenantId
              in: path
              description: ID of tenant patient and clinician belongs to
              required: true
              schema:
                  type: string
              example: apposnd
        get:
            security:
                - Seki: []
            tags:
                - Timeline Labs
            summary: Get labs timeline events
            description: Get all lab events where (a) the timeline timestamp is between
                the specified start & end timestamps, and (b) where the timeline event type
                is `labs`.
            operationId: getLabsTimelineEvents
            parameters:
                - name: start
                  in: query
                  description: UTC timestamp representing the (inclusive) starting point of
                      the date range by which to query timeline events. If not provided, no lower limit will be defined.
                  required: false
                  schema:
                      type: string
                      format: date-time
                      example: '2023-01-01T00:00:01Z'
                - name: end
                  in: query
                  description: UTC timestamp representing the (exclusive) ending point of the
                      date range by which to query timeline events. If not provided, no upper limit will be defined.
                  required: false
                  schema:
                      type: string
                      format: date-time
                      example: '2024-01-01T00:00:01Z'
            responses:
                '200':
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    "$ref": "#/components/schemas/Lab"
                '401':
                    description: Unauthorized, you didn’t send your token
                '403':
                    description: Forbidden, you sent your token and I have determined you unworthy
                '404':
                    description: Patient or tenant not found, either that resource doesn’t exist or I don’t want
                        to tell you it does and you don’t have access
                '500':
                    description: Unexpected error.
components:
    schemas:
        QuestionnaireResponseEventResponse:
            $ref: '#/components/schemas/SymptomReport'
        QuestionnaireResponseEventBody:
            type: object
            required:
                - patientId
                - tenantId
                - surveyResponseId
                - symptoms
                - alertState
                - completedOn
            properties:
                patientId:
                    type: string
                    example: 022628c4-d1ea-4ae3-9a6b-04c30ac4f903
                tenantId:
                    type: string
                    example: apposnd
                surveyResponseId:
                    type: integer
                    format: int64
                    example: 1
                symptoms:
                    type: array
                    items:
                        type: string
                        example: fatigue
                writeIn:
                    type: string
                alertState:
                    enum:
                        - NON_ALERT
                        - ALERT
                        - HIGH_ALERT
                qol:
                    type: integer
                    minimum: 0
                    maximum: 100
                completedOn:
                    type: string
                    format: date-time
                    example: '2023-04-20T21:00:00Z'
        SymptomReportResponse:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    type: object
                    required:
                        - self
                    properties:
                        self:
                            type: string
                            example: "/api/v1/tenants/apposnd/patients/apposnd-43211234/timeline/symptoms?start=2023-01-01T00:00:01Z&end=2023-03-01T00:00:01Z"
                data:
                    type: array
                    items:
                        "$ref": "#/components/schemas/SymptomReport"

        SymptomReport:
            type: object
            required:
                - id
                - patientId
                - tenantId
                - alertState
                - completedOn
                - rowCreatedAt
                - rowUpdatedAt
                - reportedSymptoms
            properties:
                id:
                    type: string
                    format: string
                    example: 935a9879-e8ce-4c86-9dcc-1ecdc9722283
                patientId:
                    type: string
                    example: cd2d37a5-7967-46b0-b4e7-d91c61aea861
                tenantId:
                    type: string
                    example: cd2d37a5-7967-46b0-b4e7-d91c61aea861
                alertState:
                    type: string
                    example: HIGH_ALERT
                completedOn:
                    type: string
                    format: date-time
                    example: '2023-04-20T21:04:36Z'
                rowCreatedAt:
                    type: string
                    format: date-time
                    example: '2023-04-20T21:04:36Z'
                rowUpdatedAt:
                    type: string
                    format: date-time
                    example: '2023-04-20T21:04:36Z'
                reportedSymptoms:
                    type: array
                    items:
                        type: string
                        example: Fatigue

        TypeMetadata:
            type: object
            required:
                - id
                - displayName
                - dateRange
            properties:
                id:
                    type: string
                    example: 935a9879-e8ce-4c86-9dcc-1ecdc9722283
                displayName:
                    type: string
                units:
                    type: string
                valueTypeLabels:
                    type: object
                    additionalProperties:
                        type: string
                dateRange:
                    $ref: "#/components/schemas/DateRange"

        LabPanelMetadata:
            type: object
            required:
                - id
                - displayName
                - types
                - dateRange
            properties:
                id:
                    type: string
                    description: id of the panel
                types:
                    description: The labs that should be included within this panel, where order matters
                    type: array
                    items:
                        $ref: "#/components/schemas/TypeMetadata"
                displayName:
                    description: The panel name to group labs within. Any labs that do not fall into a panel will be in a 'Misc' panel, like magnesium
                    type: string
                    example: 'H&H'
                dateRange:
                    $ref: "#/components/schemas/DateRange"

        DateRange:
            type: object
            required:
                - start
                - end
            properties:
                start:
                    type: string
                    format: date-time
                    example: '2020-02-04T14:39:28Z'
                end:
                    type: string
                    format: date-time
                    example: '2023-04-21T19:12:08Z'

        Comparator:
            type: string
            enum: [ GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL ]
            description: >
                A modifier on a value specifying that the value is relative to some given value rather than an exact
                value. For example, a value of `15` with a comparator of `GREATER_THAN` means that the value is `> 15`.
                Note that a comparator won't be provided when the value is an exact value, or in other words, there is
                no EQUALS comparator - it will just be null.

        Decimal:
            type: string
            description: >
                A decimal value encoded as a string to ensure that precision is maintained (i.e. "3.00" doesn't become
                "3.0")

        ReferenceRange:
            type: object
            description: >
                The range in which a value is considered normal for a vital or lab. Note that the unit is implied to be 
                the same as that of the enclosing object. Note that when a low or high boundary is missing that it is
                effectively unbounded on that side. For example, a low of 5 is equivalent to anything greater than or
                equal to 5 being considered normal (aka ">= 5").
            required:
                - source
            properties:
                low:
                    allOf: [{$ref: "#/components/schemas/Decimal"}]
                    description: The lower boundary (inclusive) of a normal value
                high:
                    allOf: [{$ref: "#/components/schemas/Decimal"}]
                    description: The upper boundary (inclusive) of a normal value
                interpretation:
                    allOf: [{$ref: "#/components/schemas/ReferenceRangeInterpretation"}]
                    description: The interpretation of this reference range
                source:
                    type: string
                    description: The source of this reference range, as appropriate to present to an end user.
                    example: EHR Reported
        ReferenceRangeInterpretation:
            type: string
            enum: [ NORMAL, HIGH, LOW ]
            description: >
                The interpretation of a reference range. Note that this is a simplified understanding compared to FHIR
                and is boiled down simply to normal high or low, and not more complex values like abnormal, critically
                high, etc.

        DateOrDateTime:
            type: string
            description: Either a date (2023-04-05) or a datetime (2023-04-05T12:34:56Z).

        Vital:
            type: object
            required:
                - typeId
                - id
                - date
                - values
            properties:
                typeId:
                    type: string
                    description: >
                        The id of the type of this vital. This can be cross referenced with the metadata
                        response to find out metadata about the type (e.g. the units).
                id:
                    type: string
                    description: |
                        The id of the type of this vital. This can be cross referenced with the metadata response to find out metadata about the type (e.g. the units).
                        *Deprecated:* this is confusing named and is being renamed typeId
                date:
                    $ref: "#/components/schemas/DateOrDateTime"
                values:
                    type: array
                    description: >
                        The value(s) of this vital. Note that only blood pressure will ever have more than one value in
                        which case the valueType can be used to know which blood pressure component the value is for (
                        i.e. systolic vs diastolic).
                    items:
                        $ref: "#/components/schemas/VitalValue"
        VitalValue:
            type: object
            required:
                - value
                - low
                - high
                - interpretation
                - sourceType
            properties:
                value:
                    allOf: [{$ref: "#/components/schemas/Decimal"}]
                    example: '88.3'
                    description: The value of this vital sign.
                comparator:
                    $ref: "#/components/schemas/Comparator"
                referenceRange:
                    $ref: "#/components/schemas/ReferenceRange"
                low:
                    type: string
                    deprecated: true
                    example: '60'
                    description: |
                        The lower boundary of the ref range, if there is one.
                        *Deprecated*: moved into referenceRange.
                high:
                    type: string
                    deprecated: true
                    example: '100'
                    description: |
                        The upper boundary of the ref range, if there is one.
                        *Deprecated*: moved into referenceRange.
                interpretation:
                    type: string
                    deprecated: true
                    example: 'N'
                    description: |
                        The interpretation of the ref range, if there is one. Either N, L, H, or empty.
                        *Deprecated*: moved into referenceRange.
                sourceType:
                    type: string
                    deprecated: true
                    example: 'EHR Reported'
                    description: |
                        If the source of the interpretation is given from a source or derived by Ronin. Note that this _is not_ an enum, but is a display oriented string that can be used as-is.
                        *Deprecated*: moved into referenceRange.
                componentType:
                    type: string
                    example: 'systolic'
                    description: >
                        The component type of this value. This is only used for blood pressure as other types of vitals
                        only have one value. In the case of blood pressure, it will be either `systolic` or `diastolic`.
                valueType:
                    type: string
                    deprecated: true
                    example: 'systolic'
                    description: >
                        The type of this value. This is only used for blood pressure as other types of vitals only have
                        one value. In the case of blood pressure, it will be either `systolic` or `diastolic`.

                        *Deprecated*: confusingly named, and is being renamed componentType

        Lab:
            type: object
            required:
                - typeId
                - date
                - value
                - valueType
            properties:
                typeId:
                    type: string
                    description: >
                        The lab type id of this lab, e.g. if it's glucose, sodium, etc. If more information is needed,
                        the lab type id can be referenced against labs.types in the metadata response.
                date:
                    $ref: "#/components/schemas/DateOrDateTime"
                value:
                    type: string
                    example: '23'
                    description: >
                        Lab values can be many different types, but this will be a stringified value. Depending on the
                        value type, processing is likely required. For example, quantities need to have their units and
                        comparator considered, ranges need to have their units considered, datetimes likely need to be
                        reformatted to a human formatted string, etc.
                comparator:
                    $ref: "#/components/schemas/Comparator"
                valueType:
                    type: string
                    enum: [QUANTITY, CODEABLE_CONCEPT, STRING, BOOLEAN, INTEGER, RANGE, TIME, DATETIME]
                    description: |
                        Type of value, for example quantity (with units and optional comparator), boolean, number, etc.
                        
                        Note that different types of values should be used in different ways:
                        * Quantities and Ranges can (and very likely do) have units, but other value types cannot
                        * Only quantities can have a comparator
                        * CodeableConcepts will not be the actual concept in `value` but will be the display text of the CodeableConcept
                        * Booleans will be either the string 'true' or the string 'false'
                        * Times will be hh:mm:ss (e.g. 13:02:26) formatted
                        * Datetimes are FHIR style datetimes and thus can be a partial date (e.g. just year or just year and month), a complete date, or a complete date time
                referenceRange:
                    $ref: "#/components/schemas/ReferenceRange"
                low:
                    type: string
                    deprecated: true
                    example: '60'
                    description: >
                        *Deprecated*: moved into referenceRange
                high:
                    type: string
                    deprecated: true
                    example: '100'
                    description: >
                        *Deprecated*: moved into referenceRange
                interpretation:
                    type: string
                    deprecated: true
                    example: 'N'
                    description: >
                        *Deprecated*: moved into referenceRange
                sourceType:
                    type: string
                    deprecated: true
                    example: 'EHR Reported'
                    description: |
                        If the source of the interpretation is given from a source or derived by Ronin
                        *Deprecated*: moved into referenceRange

        TimelineMetadataResponse:
            type: object
            required:
                - symptoms
                - vitals
                - labs
            properties:
                symptoms:
                    type: object
                    required:
                        - types
                        - dateRange
                    properties:
                        types:
                            type: array
                            items:
                                $ref: "#/components/schemas/TypeMetadata"
                        dateRange:
                            $ref: "#/components/schemas/DateRange"
                vitals:
                    type: object
                    required:
                        - types
                        - dateRange
                    properties:
                        types:
                            type: array
                            items:
                                $ref: "#/components/schemas/TypeMetadata"
                        dateRange:
                            $ref: "#/components/schemas/DateRange"
                labs:
                    type: object
                    required:
                        - panels
                        - dateRange
                    properties:
                        dateRange:
                            $ref: "#/components/schemas/DateRange"
                        panels:
                            type: array
                            items:
                                $ref: "#/components/schemas/LabPanelMetadata"

    securitySchemes:
        Seki:
            type: http
            scheme: bearer
            bearerFormat: JWT
